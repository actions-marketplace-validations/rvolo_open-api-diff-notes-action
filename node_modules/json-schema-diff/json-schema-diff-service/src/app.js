'use strict';

const bodyParser = require('body-parser');
const express = require('express');
const config = require('./config');
const logger = require('./logger');
const swaggerTools = require('swagger-tools');
const yaml = require('yamljs');
const packageJson = require('../package.json');
const createAccessLogger = require('./app/create-access-logger');
const createErrorHandler = require('./app/create-error-handler');
const jsonSchemaDiff = require('json-schema-diff');

const app = express();

const swaggerSpec = yaml.load('./swagger.yml');

swaggerTools.initializeMiddleware(swaggerSpec, (middleware) => {
    app.use(createAccessLogger(logger));

    app.use(bodyParser.json({limit: config.requestBodyLimitBytes}));

    app.use(middleware.swaggerMetadata());
    app.use(middleware.swaggerValidator());

    app.post('/diffSchemas', async (request, response, next) => {
        try {
            const result = await jsonSchemaDiff.diffSchemas({
                destinationSchema: request.body.destinationSchema,
                sourceSchema: request.body.sourceSchema
            });
            response.json(result);
        }
        catch (error) {
            error.statusCode = 400;
            next(error);
        }
    });

    app.get('/healthcheck', (request, response) => {
        response.json({version: packageJson.version});
    });

    app.use(createErrorHandler());

    app.listen(config.serverPort, () => logger.info('server.start', `Server listening on ${config.serverPort}`));
});
