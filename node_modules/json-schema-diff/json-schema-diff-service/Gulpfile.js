'use strict';

const eslint = require('gulp-eslint');
const {exec} = require('./gulp/exec');
const gulp = require('gulp');
const jasmine = require('gulp-jasmine');
const minimist = require('minimist');
const replace = require('gulp-replace');

const options = minimist(process.argv.slice(2), {
    string: [
        'app-version',
        'environment',
        'docker-registry'
    ]
});
const environment = options.environment || 'ddev';
const productionEnvironment = 'prod-east';
const version = options['app-version'] || `0.0.${Date.now()}`;
const dockerRegistry = options['docker-registry'] || 'docker.atl-paas.net';
const microsServiceName = 'json-schema-diff';
const dockerImageAndVersion = `${dockerRegistry}/atlassian/${microsServiceName}:${version}`;

const buildDocker = () => exec(`docker build -t ${dockerImageAndVersion} .`);

const buildPackageJson = () => gulp.src(['package.json'])
    .pipe(replace('"version": "0.0.0",', `"version": "${version}",`))
    .pipe(gulp.dest('build-output/'));

const buildServiceDescriptor = () => gulp.src(['service-descriptor.yml'])
    .pipe(replace('tag: 0.0.0', `tag: ${version}`))
    .pipe(replace('buildNumber: 0.0.0', `buildNumber: ${version}`))
    .pipe(gulp.dest('build-output/'));

const contractTest = () => exec('./node_modules/.bin/contract-testing validate');

const deployContract = () => {
    if (environment !== productionEnvironment) {
        return Promise.resolve();
    }

    return exec('./node_modules/.bin/contract-testing share');
};

const deployDocker = () => exec(`docker push ${dockerImageAndVersion}`);

const deployMicros = () => exec(`./node_modules/.bin/micros service:deploy ${microsServiceName} ` +
    `--env ${environment} ` +
    '--file ./build-output/service-descriptor.yml');

const deploy = gulp.series(
    buildServiceDescriptor,
    deployMicros,
    deployContract
);

const e2eTest = () => gulp.src('test/**/*.spec.js')
    .pipe(jasmine());

const lintCommits = () => exec('./node_modules/.bin/commitlint --from=e595a97');

const lintJavascript = () => gulp.src([
    'Gulpfile.js',
    'src/**/*.js',
    'test/**/*.js'
])
    .pipe(eslint())
    .pipe(eslint.format())
    .pipe(eslint.failAfterError());

const publish = gulp.series(buildPackageJson, buildDocker, deployDocker);

const endProcess = (callback) => {
    // For a reason related to the end to end tests that we are yet to understand,
    // on some machines executing the default task never exits the process. This function forces the process to exit.
    callback();
    // eslint-disable-next-line no-process-exit
    process.exit(0);
};

const specTest = () => exec('./node_modules/.bin/dredd');

exports.specTest = specTest;

exports.default = gulp.series(
    gulp.parallel(lintJavascript, lintCommits, e2eTest, specTest, contractTest),
    endProcess
);

exports.publishAndDeploy = gulp.series(publish, deploy, endProcess);

exports.watch = () => {
    gulp.watch([
        'swagger.yml',
        'src/**/*.js',
        'test/**/*.js'
    ], gulp.series(e2eTest));
};
